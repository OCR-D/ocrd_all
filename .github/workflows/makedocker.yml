# GitHub workflow for `make docker-*`.

name: make docker

# https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows
on:
  # Trigger workflow in GitHub web frontend or from API.
  workflow_dispatch:
    inputs:
      os:
        description: 'Operating system'
        required: true
        default: 'ubuntu-18.04'
        type: choice
        options:
          - 'ubuntu-18.04'
          - 'ubuntu-20.04'
      python-version:
        description: 'Python version'
        required: true
        default: '3.6'
        type: choice
        options:
          - '3.6'
          - '3.7'
          - '3.8'
          - '3.9'
          - '3.10'
      docker-image:
        description: 'Docker image'
        required: true
        default: 'docker-minimum'
        type: choice
        options:
          - 'minimum'
          - 'minimum-cuda'
          - 'medium'
          - 'medium-cuda'
          - 'maximum'
          - 'maximum-cuda'
          - 'minimum-git'
          - 'minimum-cuda-git'
          - 'medium-git'
          - 'medium-cuda-git'
          - 'maximum-git'
          - 'maximum-cuda-git'
      upload-docker-image:
        description: 'Upload Docker image'
        default: False
        type: boolean

jobs:
  make:
    runs-on: ${{ github.event.inputs.os }}

    env:
      PYTHON_VERSION: ${{ github.event.inputs.python-version }}

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    - name: Show Python3 version
      run: python3 --version
    - name: Show disk usage of Homebrew, Android and .NET
      run: sudo du -mscx /home/linuxbrew /usr/local/lib/android /usr/share/dotnet 2>/dev/null || true
    - name: Remove Docker images
      run: |
           df -h
           docker images
           docker rmi alpine:3.12 alpine:3.13 alpine:3.14
           docker rmi buildpack-deps:stretch buildpack-deps:buster buildpack-deps:bullseye
           docker rmi debian:9 debian:10 debian:11
           docker rmi moby/buildkit:latest
           docker rmi node:12-alpine node:14-alpine node:16-alpine
           docker rmi node:12 node:14 node:16
           if false; then # don't remove Ubuntu images
           docker rmi ubuntu:16.04 ubuntu:18.04 ubuntu:20.04
           fi
           docker images
           df -h /
    - name: Remove unneeded Debian packages
      run: |
           if false; then # skip time consuming package uninstall
           sudo apt-get install -y deborphan
           deborphan -a | sort
           sudo apt-get purge -y $(deborphan -a|fgrep main/cli-mono|while read dummy package; do echo $package; done)
           sudo apt-get purge -y $(deborphan -a|fgrep main/database|while read dummy package; do echo $package; done)
           sudo apt-get purge -y $(deborphan -a|fgrep main/devel|while read dummy package; do echo $package; done)
           sudo apt-get purge -y $(deborphan -a|fgrep main/httpd|while read dummy package; do echo $package; done)
           sudo apt-get purge -y $(deborphan -a|fgrep main/php|while read dummy package; do echo $package; done)
           sudo apt-get purge -y $(deborphan -a|fgrep main/vcs|while read dummy package; do echo $package; done)
           deborphan | sort
           sudo du -mscx /* 2>/dev/null || true
           sudo du -mscx /opt/* 2>/dev/null || true
           sudo du -mscx /usr/* 2>/dev/null || true
           df -h /
           fi
    - name: Remove Homebrew, Android and .NET
      run: |
           # https://github.com/actions/virtual-environments/issues/2606#issuecomment-772683150
           # NONINTERACTIVE=1 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/uninstall.sh)"
           sudo rm -rf /home/linuxbrew # will release Homebrew
           sudo rm -rf /usr/local/lib/android # will release about 10 GB if you don't need Android
           sudo rm -rf /usr/share/dotnet # will release about 20GB if you don't need .NET
           sudo du -mscx /* 2>/dev/null || true
           df -h /
    - name: Make Docker image
      run: make docker-${{ github.event.inputs.docker-image }}
    - name: Show Docker images
      run: docker images
    - name: Login to Docker Hub and push new image(s) to Docker Hub
      run: |
           if ${{ github.event.inputs.upload-docker-image }}; then
             echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login --username ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
             docker push ocrd/all:${{ github.event.inputs.docker-image }}
             if test ${{ github.event.inputs.docker-image }} = maximum-git; then
               # Alias Docker image.
               docker tag ocrd/all:maximum-git ocrd/all:latest
               docker push ocrd/all:latest
             fi
           fi
